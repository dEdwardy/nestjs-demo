import { Controller, Get, Param, Query } from '@nestjs/common';
import { AppService } from './app.service';

@Controller()
export class AppController {
    constructor(private readonly appService: AppService) { }
    count = 0;
    @Get()
    getHello(): string {
        return this.appService.getHello();
    }
    @Get('banner/type=2')
    banner() {
        return {
            banners: [
                { imageUrl: 'http://a.hiphotos.baidu.com/image/pic/item/838ba61ea8d3fd1fc9c7b6853a4e251f94ca5f46.jpg' },
                { imageUrl: 'http://b.hiphotos.baidu.com/image/pic/item/908fa0ec08fa513db777cf78376d55fbb3fbd9b3.jpg' },
                { imageUrl: 'http://f.hiphotos.baidu.com/image/pic/item/0e2442a7d933c8956c0e8eeadb1373f08202002a.jpg' },
                { imageUrl: 'http://f.hiphotos.baidu.com/image/pic/item/b151f8198618367aa7f3cc7424738bd4b31ce525.jpg' },
            ]
        }
    }
    @Get('search/hot')
    hots() {
        let res = [];
        let results = ['哈哈', '呵呵', '嘿嘿', '嘻嘻', '奥利给'];
        let num = Math.ceil(Math.random() * 10 + 1);
        for (let i = 0; i < num; i++) {
            res.push({
                first: 'Result' + (i + 1) + ':' + results[Math.ceil(Math.random() * 4)]
            })
        }
        return {
            result: {
                hots: res
            }
        }
    }
    @Get('rtp')
    getRtp(@Query('type') type) {
        let path2 = [
            [120.73896, 31.344697],
            [120.738753, 31.346393]
        ];
        let [startP, endP] = path2;
        let steps = 540;
        let [x1, y1] = startP;
        let [x2, y2] = endP;
        let step = [ (x2-x1)/steps,(y2-y1)/steps];
        let arrAdd = [];
        for(let i = 0;i<steps-1;i++){
            arrAdd.push([ x1+(i+1)*step[0],y1+(i+1)*step[1]])
        }
        let total = [
            [120.73896, 31.344697],
            ...arrAdd,
            [120.738753, 31.346393]
        ];
        let path3 = [
            [120.73896, 31.344697],
            [120.738879,31.345591],
            [120.739688,31.345695]
        ];
        let [startPonit, middle, endPonit] = path3;
        let steps1 = 180;
        let steps2 = 180;
        let [x3,y3] = startPonit;
        let [x4,y4] = middle;
        let [x5,y5] = endPonit;
        let step1 = [ (x4-x3)/steps1,(y4-y3)/steps1];
        let step2 = [ (x5-x4)/steps2,(y5-y4)/steps2];
        let arrAdd1 = [];
        let arrAdd2 = [];

        for(let i = 0;i<steps1-1;i++){
            arrAdd1.push([ x3+(i+1)*step1[0],y3+(i+1)*step1[1]])
        }
        for(let i = 0;i<steps2-1;i++){
            arrAdd2.push([ x4+(i+1)*step2[0],y4+(i+1)*step2[1]])
        }
        let total2 = [
            [120.73896, 31.344697],
            ...arrAdd1,
            [120.738879,31.345611],
            ...arrAdd2,
            [120.739688,31.345695]
        ]
        //
        //
        //
        let path1;
        if (type == 1) {
            path1 = [
                [120.73896, 31.344697],
                [120.738955, 31.34477],
                [120.738955, 31.34477],
                [120.73896, 31.344794],
                [120.738951, 31.344821],
                [120.738946, 31.344863],
                [120.738928, 31.344921],
                [120.738933, 31.344986],
                [120.738933, 31.345002],
                [120.738919, 31.345117],
                [120.738919, 31.345075],
                [120.738915, 31.345168],
                [120.738919, 31.345206],
                [120.738915, 31.345218],
                [120.738919, 31.345248],
                [120.738919, 31.34531],
                [120.738915, 31.345333],
                [120.738906, 31.345372],
                [120.738897, 31.345472],
                [120.738888, 31.345507],
                [120.738883, 31.34553],
                [120.738879, 31.345538],
                [120.738879, 31.345568],
                [120.738897, 31.345611],
                [120.738947, 31.345603],
                [120.738973, 31.345595],
                [120.738991, 31.345595],
                [120.739077, 31.345591],
                [120.739054, 31.345595],
                [120.739104, 31.345595],
                [120.739153, 31.345587],
                [120.739238, 31.345607],
                [120.739256, 31.345645],
                [120.739265, 31.345657],
                [120.739256, 31.34583],
                [120.739229, 31.345838],
                [120.739247, 31.345695],
                [120.739274, 31.345649],
                [120.739256, 31.345638],
                [120.739288, 31.345603],
                [120.73931, 31.345611],
                [120.73931, 31.345611],
                [120.739333, 31.345607],
                [120.739333, 31.345607],
                [120.739328, 31.345607],
                [120.739364, 31.345618],
                [120.739387, 31.345618],
                [120.739387, 31.345622],
                [120.739409, 31.345622],
                [120.73945, 31.345634],
                [120.73971, 31.345688],
            ];
        } else if (type == 2) {
            path1 = total;

        } else if (type == 3) {
            path1 = [
                [120.73896, 31.344697],
                [120.738955, 31.34477],
                [120.738955, 31.34477],
                [120.73896, 31.344794],
                [120.738951, 31.344821],
                [120.738946, 31.344863],
                [120.738928, 31.344921],
                [120.738933, 31.344986],
                [120.738933, 31.345002],
                [120.738919, 31.345117],
                [120.738919, 31.345075],
                [120.738915, 31.345168],
                [120.738919, 31.345206],
                [120.738915, 31.345218],
                [120.738919, 31.345248],
                [120.738919, 31.34531],
                [120.738915, 31.345333],
                [120.738906, 31.345372],
                [120.738897, 31.345472],
                [120.738888, 31.345507],
                [120.738883, 31.34553],
                [120.738879, 31.345538],
                [120.738879, 31.345568],
                [120.738897, 31.345611],
                [120.738947, 31.345603],
                [120.738973, 31.345595],
                [120.738991, 31.345595],
                [120.739077, 31.345591],
                [120.739054, 31.345595],
                [120.739104, 31.345595],
                [120.739153, 31.345587],
                [120.739238, 31.345607],
                [120.739256, 31.345645],
                [120.739265, 31.345657],
                [120.739256, 31.34583],
                [120.739229, 31.345838],
                [120.739247, 31.345695],
                [120.739274, 31.345649],
                [120.739256, 31.345638],
                [120.739288, 31.345603],
                [120.73931, 31.345611],
                [120.73931, 31.345611],
                [120.739333, 31.345607],
                [120.739333, 31.345607],
                [120.739328, 31.345607],
                [120.739364, 31.345618],
                [120.739387, 31.345618],
                [120.739387, 31.345622],
                [120.739409, 31.345622],
                [120.73945, 31.345634],
                [120.73971, 31.345688],
            ]
        } else {
            return [
                [120.73896, 31.344697],
                [120.738955, 31.34477],
                [120.738955, 31.34477],
                [120.73896, 31.344794],
                [120.738951, 31.344821],
                [120.738946, 31.344863],
                [120.738928, 31.344921],
                [120.738933, 31.344986],
                [120.738933, 31.345002],
                [120.738919, 31.345117],
                [120.738919, 31.345075],
                [120.738915, 31.345168],
                [120.738919, 31.345206],
                [120.738915, 31.345218],
                [120.738919, 31.345248],
                [120.738919, 31.34531],
                [120.738915, 31.345333],
                [120.738906, 31.345372],
                [120.738897, 31.345472],
                [120.738888, 31.345507],
                [120.738883, 31.34553],
                [120.738879, 31.345538],
                [120.738879, 31.345568],
                [120.738897, 31.345611],
                [120.738947, 31.345603],
                [120.738973, 31.345595],
                [120.738991, 31.345595],
                [120.739077, 31.345591],
                [120.739054, 31.345595],
                [120.739104, 31.345595],
                [120.739153, 31.345587],
                [120.739238, 31.345607],
                [120.739256, 31.345645],
                [120.739265, 31.345657],
                [120.739256, 31.34583],
                [120.739229, 31.345838],
                [120.739247, 31.345695],
                [120.739274, 31.345649],
                [120.739256, 31.345638],
                [120.739288, 31.345603],
                [120.73931, 31.345611],
                [120.73931, 31.345611],
                [120.739333, 31.345607],
                [120.739333, 31.345607],
                [120.739328, 31.345607],
                [120.739364, 31.345618],
                [120.739387, 31.345618],
                [120.739387, 31.345622],
                [120.739409, 31.345622],
                [120.73945, 31.345634],
                [120.73971, 31.345688],
            ]
        }

        let length = path1.length;
        this.count++;
        if (this.count > length) {
            this.count = 1;
        }
        let start  = path1[0]
        let drivingPath = path1[this.count - 1];
        return [
            {
            id: 'id1111', number: '苏E.1111', istrue: true,color:'#79CDCD',
            drivingPath: this.count == 1 ? [[...start], [...start]] : path1.slice(0, this.count)
        },
        // {
        //     id: 'id2222', number: '苏E.2222', istrue: true,color:'#79CDCD',
        //     drivingPath: this.count == 1 ? [[...start], [...start]] : total2.slice(0, this.count)
        // }
    ];
    }
}
